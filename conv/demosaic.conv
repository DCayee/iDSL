xoff, yoff are constant

// red
if((x+xoff)%2==1 && (y+yoff)%2==1){ // red is known                                                                  
  out(0)(x,y) = in(x,y);;
}else if((x+xoff)%2==0 && (y+yoff)%2==1){
  var a = in(x-1,y);
  var b = in(x+1,y);
  out(0)(x,y) = (a+b) >> 1;
}else if((x+xoff)%2==1 && (y+yoff)%2==0){
  var a = in(x,y+1);
  var b = in(x,y-1);
  out(0)(x,y) = (a+b) >> 1;
}else{
  float a = in(x+1,y+1);
  float b = in(x-1,y-1);
  float c = in(y+1,x-1);
  float d = in(x+1,y-1);
  out(0)(x,y) = (a+b+c+d) >> 2;
}


------
I think it might be better to basically do a nxn -> nxn stencil here (or a pointwise stencil) - basically bring a whole block on chip and then do the calc for the whole block. there isn't really any locality between adjacent pixels here.

Or: this would be a case where we have a very small stencil but duplicate the hardware for that one stencil tons of times.

stride 2, 3x3 stencil

how to derive optimal bit width automatically?